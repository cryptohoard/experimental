// Code generated by protoc-gen-go. DO NOT EDIT.
// source: betservice.proto

/*
Package betservice is a generated protocol buffer package.

It is generated from these files:
	betservice.proto

It has these top-level messages:
	PlaceBetRequest
	CashoutBetRequest
	PayoutBetRequest
	Bet
	BetFilter
	BetServiceResponse
*/
package betservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product int32

const (
	Product_PRODUCT_NONE Product = 0
	Product_BTCUSD       Product = 1
	Product_BCHUSD       Product = 2
	Product_ETHUSD       Product = 3
	Product_LTCUSD       Product = 4
)

var Product_name = map[int32]string{
	0: "PRODUCT_NONE",
	1: "BTCUSD",
	2: "BCHUSD",
	3: "ETHUSD",
	4: "LTCUSD",
}
var Product_value = map[string]int32{
	"PRODUCT_NONE": 0,
	"BTCUSD":       1,
	"BCHUSD":       2,
	"ETHUSD":       3,
	"LTCUSD":       4,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type State int32

const (
	State_STATE_NONE State = 0
	State_PROCESSING State = 1
	State_PLACED     State = 2
	State_CASHOUT    State = 3
	State_PAYOUT     State = 4
)

var State_name = map[int32]string{
	0: "STATE_NONE",
	1: "PROCESSING",
	2: "PLACED",
	3: "CASHOUT",
	4: "PAYOUT",
}
var State_value = map[string]int32{
	"STATE_NONE": 0,
	"PROCESSING": 1,
	"PLACED":     2,
	"CASHOUT":    3,
	"PAYOUT":     4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PlaceBetRequest struct {
	BetId         string  `protobuf:"bytes,1,opt,name=bet_id,json=betId" json:"bet_id,omitempty"`
	CustomerId    string  `protobuf:"bytes,2,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Exchange      string  `protobuf:"bytes,3,opt,name=exchange" json:"exchange,omitempty"`
	Product       Product `protobuf:"varint,4,opt,name=product,enum=betservice.Product" json:"product,omitempty"`
	Amount        float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty"`
	ProfitPercent float64 `protobuf:"fixed64,6,opt,name=profit_percent,json=profitPercent" json:"profit_percent,omitempty"`
	LossPercent   float64 `protobuf:"fixed64,7,opt,name=loss_percent,json=lossPercent" json:"loss_percent,omitempty"`
}

func (m *PlaceBetRequest) Reset()                    { *m = PlaceBetRequest{} }
func (m *PlaceBetRequest) String() string            { return proto.CompactTextString(m) }
func (*PlaceBetRequest) ProtoMessage()               {}
func (*PlaceBetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlaceBetRequest) GetBetId() string {
	if m != nil {
		return m.BetId
	}
	return ""
}

func (m *PlaceBetRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *PlaceBetRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *PlaceBetRequest) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_PRODUCT_NONE
}

func (m *PlaceBetRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PlaceBetRequest) GetProfitPercent() float64 {
	if m != nil {
		return m.ProfitPercent
	}
	return 0
}

func (m *PlaceBetRequest) GetLossPercent() float64 {
	if m != nil {
		return m.LossPercent
	}
	return 0
}

type CashoutBetRequest struct {
	BetId      string `protobuf:"bytes,1,opt,name=bet_id,json=betId" json:"bet_id,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
}

func (m *CashoutBetRequest) Reset()                    { *m = CashoutBetRequest{} }
func (m *CashoutBetRequest) String() string            { return proto.CompactTextString(m) }
func (*CashoutBetRequest) ProtoMessage()               {}
func (*CashoutBetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CashoutBetRequest) GetBetId() string {
	if m != nil {
		return m.BetId
	}
	return ""
}

func (m *CashoutBetRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

type PayoutBetRequest struct {
	BetId      string `protobuf:"bytes,1,opt,name=bet_id,json=betId" json:"bet_id,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
}

func (m *PayoutBetRequest) Reset()                    { *m = PayoutBetRequest{} }
func (m *PayoutBetRequest) String() string            { return proto.CompactTextString(m) }
func (*PayoutBetRequest) ProtoMessage()               {}
func (*PayoutBetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PayoutBetRequest) GetBetId() string {
	if m != nil {
		return m.BetId
	}
	return ""
}

func (m *PayoutBetRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

type Bet struct {
	BetId          string                     `protobuf:"bytes,1,opt,name=bet_id,json=betId" json:"bet_id,omitempty"`
	CustomerId     string                     `protobuf:"bytes,2,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Exchange       string                     `protobuf:"bytes,3,opt,name=exchange" json:"exchange,omitempty"`
	Product        Product                    `protobuf:"varint,4,opt,name=product,enum=betservice.Product" json:"product,omitempty"`
	Price          float64                    `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`
	InitialAmount  float64                    `protobuf:"fixed64,6,opt,name=initial_amount,json=initialAmount" json:"initial_amount,omitempty"`
	CurrentAmount  float64                    `protobuf:"fixed64,7,opt,name=current_amount,json=currentAmount" json:"current_amount,omitempty"`
	CryptoCurrency float64                    `protobuf:"fixed64,8,opt,name=crypto_currency,json=cryptoCurrency" json:"crypto_currency,omitempty"`
	ProfitPercent  float64                    `protobuf:"fixed64,9,opt,name=profit_percent,json=profitPercent" json:"profit_percent,omitempty"`
	LossPercent    float64                    `protobuf:"fixed64,10,opt,name=loss_percent,json=lossPercent" json:"loss_percent,omitempty"`
	State          State                      `protobuf:"varint,11,opt,name=state,enum=betservice.State" json:"state,omitempty"`
	CreationTime   *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	ClosedTime     *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=closed_time,json=closedTime" json:"closed_time,omitempty"`
}

func (m *Bet) Reset()                    { *m = Bet{} }
func (m *Bet) String() string            { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()               {}
func (*Bet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Bet) GetBetId() string {
	if m != nil {
		return m.BetId
	}
	return ""
}

func (m *Bet) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Bet) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Bet) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_PRODUCT_NONE
}

func (m *Bet) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Bet) GetInitialAmount() float64 {
	if m != nil {
		return m.InitialAmount
	}
	return 0
}

func (m *Bet) GetCurrentAmount() float64 {
	if m != nil {
		return m.CurrentAmount
	}
	return 0
}

func (m *Bet) GetCryptoCurrency() float64 {
	if m != nil {
		return m.CryptoCurrency
	}
	return 0
}

func (m *Bet) GetProfitPercent() float64 {
	if m != nil {
		return m.ProfitPercent
	}
	return 0
}

func (m *Bet) GetLossPercent() float64 {
	if m != nil {
		return m.LossPercent
	}
	return 0
}

func (m *Bet) GetState() State {
	if m != nil {
		return m.State
	}
	return State_STATE_NONE
}

func (m *Bet) GetCreationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Bet) GetClosedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ClosedTime
	}
	return nil
}

type BetFilter struct {
	Product Product `protobuf:"varint,1,opt,name=product,enum=betservice.Product" json:"product,omitempty"`
	State   State   `protobuf:"varint,2,opt,name=state,enum=betservice.State" json:"state,omitempty"`
}

func (m *BetFilter) Reset()                    { *m = BetFilter{} }
func (m *BetFilter) String() string            { return proto.CompactTextString(m) }
func (*BetFilter) ProtoMessage()               {}
func (*BetFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BetFilter) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_PRODUCT_NONE
}

func (m *BetFilter) GetState() State {
	if m != nil {
		return m.State
	}
	return State_STATE_NONE
}

type BetServiceResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Bet     *Bet `protobuf:"bytes,2,opt,name=bet" json:"bet,omitempty"`
}

func (m *BetServiceResponse) Reset()                    { *m = BetServiceResponse{} }
func (m *BetServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*BetServiceResponse) ProtoMessage()               {}
func (*BetServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BetServiceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BetServiceResponse) GetBet() *Bet {
	if m != nil {
		return m.Bet
	}
	return nil
}

func init() {
	proto.RegisterType((*PlaceBetRequest)(nil), "betservice.PlaceBetRequest")
	proto.RegisterType((*CashoutBetRequest)(nil), "betservice.CashoutBetRequest")
	proto.RegisterType((*PayoutBetRequest)(nil), "betservice.PayoutBetRequest")
	proto.RegisterType((*Bet)(nil), "betservice.Bet")
	proto.RegisterType((*BetFilter)(nil), "betservice.BetFilter")
	proto.RegisterType((*BetServiceResponse)(nil), "betservice.BetServiceResponse")
	proto.RegisterEnum("betservice.Product", Product_name, Product_value)
	proto.RegisterEnum("betservice.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BetService service

type BetServiceClient interface {
	ListBets(ctx context.Context, in *BetFilter, opts ...grpc.CallOption) (BetService_ListBetsClient, error)
	PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error)
	CashoutBet(ctx context.Context, in *CashoutBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error)
	PayoutBet(ctx context.Context, in *PayoutBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error)
}

type betServiceClient struct {
	cc *grpc.ClientConn
}

func NewBetServiceClient(cc *grpc.ClientConn) BetServiceClient {
	return &betServiceClient{cc}
}

func (c *betServiceClient) ListBets(ctx context.Context, in *BetFilter, opts ...grpc.CallOption) (BetService_ListBetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BetService_serviceDesc.Streams[0], c.cc, "/betservice.BetService/ListBets", opts...)
	if err != nil {
		return nil, err
	}
	x := &betServiceListBetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BetService_ListBetsClient interface {
	Recv() (*Bet, error)
	grpc.ClientStream
}

type betServiceListBetsClient struct {
	grpc.ClientStream
}

func (x *betServiceListBetsClient) Recv() (*Bet, error) {
	m := new(Bet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *betServiceClient) PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error) {
	out := new(BetServiceResponse)
	err := grpc.Invoke(ctx, "/betservice.BetService/PlaceBet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) CashoutBet(ctx context.Context, in *CashoutBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error) {
	out := new(BetServiceResponse)
	err := grpc.Invoke(ctx, "/betservice.BetService/CashoutBet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) PayoutBet(ctx context.Context, in *PayoutBetRequest, opts ...grpc.CallOption) (*BetServiceResponse, error) {
	out := new(BetServiceResponse)
	err := grpc.Invoke(ctx, "/betservice.BetService/PayoutBet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BetService service

type BetServiceServer interface {
	ListBets(*BetFilter, BetService_ListBetsServer) error
	PlaceBet(context.Context, *PlaceBetRequest) (*BetServiceResponse, error)
	CashoutBet(context.Context, *CashoutBetRequest) (*BetServiceResponse, error)
	PayoutBet(context.Context, *PayoutBetRequest) (*BetServiceResponse, error)
}

func RegisterBetServiceServer(s *grpc.Server, srv BetServiceServer) {
	s.RegisterService(&_BetService_serviceDesc, srv)
}

func _BetService_ListBets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BetFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BetServiceServer).ListBets(m, &betServiceListBetsServer{stream})
}

type BetService_ListBetsServer interface {
	Send(*Bet) error
	grpc.ServerStream
}

type betServiceListBetsServer struct {
	grpc.ServerStream
}

func (x *betServiceListBetsServer) Send(m *Bet) error {
	return x.ServerStream.SendMsg(m)
}

func _BetService_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betservice.BetService/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).PlaceBet(ctx, req.(*PlaceBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_CashoutBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashoutBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).CashoutBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betservice.BetService/CashoutBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).CashoutBet(ctx, req.(*CashoutBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_PayoutBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayoutBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).PayoutBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/betservice.BetService/PayoutBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).PayoutBet(ctx, req.(*PayoutBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "betservice.BetService",
	HandlerType: (*BetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBet",
			Handler:    _BetService_PlaceBet_Handler,
		},
		{
			MethodName: "CashoutBet",
			Handler:    _BetService_CashoutBet_Handler,
		},
		{
			MethodName: "PayoutBet",
			Handler:    _BetService_PayoutBet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBets",
			Handler:       _BetService_ListBets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "betservice.proto",
}

func init() { proto.RegisterFile("betservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xad, 0xf3, 0x9d, 0x9b, 0x8f, 0xa6, 0xf3, 0x5e, 0x9f, 0xac, 0x3c, 0xa0, 0x69, 0x24, 0xd4,
	0xa8, 0x12, 0x29, 0x0a, 0x12, 0x1b, 0x16, 0x28, 0x71, 0x03, 0x0d, 0x0d, 0x8d, 0xb1, 0xdd, 0x05,
	0xab, 0xc8, 0x99, 0xdc, 0xb6, 0x96, 0x12, 0x8f, 0xf1, 0x8c, 0x11, 0xfd, 0x03, 0xfc, 0x19, 0xfe,
	0x1f, 0x6b, 0x34, 0x1e, 0x3b, 0x4d, 0x53, 0x44, 0x2b, 0xc1, 0x82, 0xdd, 0x9d, 0x73, 0xce, 0x1c,
	0xcf, 0x9d, 0xe3, 0xb9, 0xd0, 0x98, 0xa1, 0xe0, 0x18, 0x7e, 0xf6, 0x28, 0x76, 0x83, 0x90, 0x09,
	0x46, 0xe0, 0x06, 0x69, 0xee, 0x5d, 0x32, 0x76, 0xb9, 0xc0, 0xa3, 0x98, 0x99, 0x45, 0x17, 0x47,
	0xc2, 0x5b, 0x22, 0x17, 0xee, 0x32, 0x50, 0xe2, 0xf6, 0x77, 0x0d, 0xb6, 0xcd, 0x85, 0x4b, 0x71,
	0x80, 0xc2, 0xc2, 0x4f, 0x11, 0x72, 0x41, 0x76, 0xa1, 0x30, 0x43, 0x31, 0xf5, 0xe6, 0xba, 0xd6,
	0xd2, 0x3a, 0x65, 0x2b, 0x3f, 0x43, 0x31, 0x9a, 0x93, 0x3d, 0xa8, 0xd0, 0x88, 0x0b, 0xb6, 0xc4,
	0x50, 0x72, 0x99, 0x98, 0x83, 0x14, 0x1a, 0xcd, 0x49, 0x13, 0x4a, 0xf8, 0x85, 0x5e, 0xb9, 0xfe,
	0x25, 0xea, 0xd9, 0x98, 0x5d, 0xad, 0xc9, 0x33, 0x28, 0x06, 0x21, 0x9b, 0x47, 0x54, 0xe8, 0xb9,
	0x96, 0xd6, 0xa9, 0xf7, 0xfe, 0xe9, 0xae, 0x1d, 0xdc, 0x54, 0x94, 0x95, 0x6a, 0xc8, 0x7f, 0x50,
	0x70, 0x97, 0x2c, 0xf2, 0x85, 0x9e, 0x6f, 0x69, 0x1d, 0xcd, 0x4a, 0x56, 0xe4, 0x29, 0xd4, 0x83,
	0x90, 0x5d, 0x78, 0x62, 0x1a, 0x60, 0x48, 0xd1, 0x17, 0x7a, 0x21, 0xe6, 0x6b, 0x0a, 0x35, 0x15,
	0x48, 0xf6, 0xa1, 0xba, 0x60, 0x9c, 0xaf, 0x44, 0xc5, 0x58, 0x54, 0x91, 0x58, 0x22, 0x69, 0x9f,
	0xc2, 0x8e, 0xe1, 0xf2, 0x2b, 0x16, 0x89, 0xdf, 0xef, 0xbc, 0xfd, 0x0e, 0x1a, 0xa6, 0x7b, 0xfd,
	0x67, 0xbc, 0xbe, 0xe6, 0x20, 0x3b, 0xc0, 0xbf, 0x22, 0x85, 0x7f, 0x21, 0x1f, 0x84, 0x1e, 0xc5,
	0x24, 0x04, 0xb5, 0x90, 0x19, 0x78, 0xbe, 0x27, 0x3c, 0x77, 0x31, 0x4d, 0x32, 0x4a, 0x32, 0x48,
	0xd0, 0xfe, 0x2a, 0x2a, 0x1a, 0x85, 0x21, 0xfa, 0x22, 0x95, 0xa9, 0x14, 0x6a, 0x09, 0x9a, 0xc8,
	0x0e, 0x60, 0x9b, 0x86, 0xd7, 0x81, 0x60, 0x53, 0x85, 0xd3, 0x6b, 0xbd, 0x14, 0xeb, 0xea, 0x0a,
	0x36, 0x12, 0xf4, 0x27, 0xd1, 0x97, 0x1f, 0x12, 0x3d, 0xdc, 0x89, 0x9e, 0x1c, 0x40, 0x9e, 0x0b,
	0x57, 0xa0, 0x5e, 0x89, 0xef, 0x60, 0x67, 0xfd, 0x0e, 0x6c, 0x49, 0x58, 0x8a, 0x27, 0xaf, 0xa1,
	0x46, 0x43, 0x74, 0x85, 0xc7, 0xfc, 0xa9, 0x7c, 0x38, 0x7a, 0xb5, 0xa5, 0x75, 0x2a, 0xbd, 0x66,
	0x57, 0xbd, 0xaa, 0x6e, 0xfa, 0xaa, 0xba, 0x4e, 0xfa, 0xaa, 0xac, 0x6a, 0xba, 0x41, 0x42, 0xe4,
	0x15, 0x54, 0xe8, 0x82, 0x71, 0x9c, 0xab, 0xed, 0xb5, 0x7b, 0xb7, 0x83, 0x92, 0x4b, 0xa0, 0x4d,
	0xa1, 0x3c, 0x40, 0xf1, 0xc6, 0x5b, 0x08, 0x0c, 0xd7, 0x93, 0xd3, 0x1e, 0x90, 0xdc, 0xaa, 0xc5,
	0xcc, 0xaf, 0x5b, 0x6c, 0x7f, 0x00, 0x32, 0x40, 0x61, 0x2b, 0xca, 0x42, 0x1e, 0x30, 0x9f, 0x23,
	0xd1, 0xa1, 0xc8, 0x23, 0x4a, 0x91, 0xf3, 0xf8, 0x6b, 0x25, 0x2b, 0x5d, 0x92, 0x7d, 0xc8, 0xce,
	0x50, 0xc4, 0xb6, 0x95, 0xde, 0xf6, 0xba, 0xad, 0xfc, 0xf5, 0x25, 0x77, 0x78, 0x0a, 0xc5, 0xe4,
	0x3c, 0xa4, 0x01, 0x55, 0xd3, 0x9a, 0x1c, 0x9f, 0x1b, 0xce, 0xf4, 0x6c, 0x72, 0x36, 0x6c, 0x6c,
	0x11, 0x80, 0xc2, 0xc0, 0x31, 0xce, 0xed, 0xe3, 0x86, 0x16, 0xd7, 0xc6, 0x89, 0xac, 0x33, 0xb2,
	0x1e, 0x3a, 0x71, 0x9d, 0x95, 0xf5, 0x58, 0x69, 0x72, 0x87, 0x63, 0xc8, 0xc7, 0xe7, 0x25, 0x75,
	0x00, 0xdb, 0xe9, 0x3b, 0xc3, 0xd4, 0xa8, 0x0e, 0x60, 0x5a, 0x13, 0x63, 0x68, 0xdb, 0xa3, 0xb3,
	0xb7, 0xca, 0xcc, 0x1c, 0xf7, 0x8d, 0xa1, 0x34, 0xab, 0x40, 0xd1, 0xe8, 0xdb, 0x27, 0x93, 0x73,
	0x47, 0xb9, 0x99, 0xfd, 0x8f, 0xb2, 0xce, 0xf5, 0xbe, 0x65, 0x00, 0x6e, 0xda, 0x25, 0x2f, 0xa1,
	0x34, 0xf6, 0xb8, 0x7c, 0xb4, 0x9c, 0xec, 0x6e, 0xf4, 0xa2, 0xee, 0xbd, 0xb9, 0xd9, 0x62, 0x7b,
	0xeb, 0xb9, 0x46, 0x46, 0x50, 0x4a, 0x67, 0x26, 0xf9, 0xff, 0x56, 0x0e, 0xb7, 0x27, 0x69, 0xf3,
	0xc9, 0xc6, 0xee, 0x8d, 0x7b, 0x6e, 0x6f, 0x91, 0xf7, 0x00, 0x37, 0x63, 0x88, 0x3c, 0x5e, 0xd7,
	0xdf, 0x19, 0x4f, 0x0f, 0xb0, 0x3b, 0x85, 0xf2, 0x6a, 0x10, 0x91, 0x47, 0xb7, 0x8e, 0xb6, 0x31,
	0x9f, 0xee, 0x37, 0x9b, 0x15, 0xe2, 0x1f, 0xf4, 0xc5, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0xd1, 0xc9, 0x07, 0x63, 0x06, 0x00, 0x00,
}
